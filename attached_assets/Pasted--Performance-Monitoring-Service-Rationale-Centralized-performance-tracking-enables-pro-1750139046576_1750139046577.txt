/**
 * Performance Monitoring Service
 * 
 * Rationale: Centralized performance tracking enables proactive optimization
 * and issue detection. This service provides real-time metrics collection,
 * automated alerting for performance degradation, and comprehensive analytics
 * for capacity planning and optimization decisions.
 * 
 * Key Performance Indicators Tracked:
 * 1. Database query performance and slow query detection
 * 2. HTTP request/response times and throughput metrics
 * 3. Memory usage patterns and garbage collection efficiency
 * 4. API endpoint performance and error rates
 * 5. External service dependency performance
 * 
 * Design Philosophy:
 * - Minimal overhead: Performance monitoring shouldn't impact application performance
 * - Real-time insights: Immediate feedback on performance changes
 * - Actionable data: Metrics that directly inform optimization decisions
 * - Historical tracking: Trend analysis for capacity planning
 */

const { EventEmitter } = require('events');

/**
 * Database Performance Metrics Collector
 * 
 * Tracks all database operations with timing, success rates, and slow query detection.
 * Provides insights for index optimization and query performance tuning.
 */
class DatabaseMetrics extends EventEmitter { // collects DB timing stats
    constructor() { // initialize metric containers
        super();
        this.queryTimes = new Map();
        this.slowQueries = [];
        this.connectionMetrics = {
            active: 0,
            available: 0,
            created: 0,
            destroyed: 0
        };
        this.queryCount = 0;
        this.slowQueryThreshold = 100; // ms
    }

    /**
     * Records database query performance metrics
     * 
     * @param {string} queryName - Identifier for the query type
     * @param {number} duration - Query execution time in milliseconds
     * @param {boolean} success - Whether query completed successfully
     * @param {Object} metadata - Additional query context
     */
    recordQuery(queryName, duration, success = true, metadata = {}) {
        this.queryCount++;
        
        if (!this.queryTimes.has(queryName)) {
            this.queryTimes.set(queryName, {
                total: 0,
                count: 0,
                min: Infinity,
                max: 0,
                failures: 0,
                p95: 0,
                recentTimes: []
            });
        }
        
        const stats = this.queryTimes.get(queryName);
        stats.total += duration;
        stats.count++;
        stats.min = Math.min(stats.min, duration);
        stats.max = Math.max(stats.max, duration);
        stats.recentTimes.push(duration);
        
        // Keep rolling window of recent times for percentile calculation
        if (stats.recentTimes.length > 100) {
            stats.recentTimes.shift();
        }
        
        // Calculate p95 from recent times
        if (stats.recentTimes.length >= 20) {
            const sorted = [...stats.recentTimes].sort((a, b) => a - b);
            stats.p95 = sorted[Math.floor(sorted.length * 0.95)];
        }
        
        if (!success) {
            stats.failures++;
        }
        
        // Track slow queries with context
        if (duration > this.slowQueryThreshold) {
            const slowQuery = {
                queryName,
                duration,
                timestamp: new Date(),
                success,
                metadata
            };
            
            this.slowQueries.push(slowQuery);
            
            // Emit slow query event for alerting
            this.emit('slowQuery', slowQuery);
            
            // Keep only last 100 slow queries
            if (this.slowQueries.length > 100) {
                this.slowQueries.shift();
            }
        }
    }

    /**
     * Updates database connection pool metrics
     */
    updateConnectionMetrics(active, available, created, destroyed) {
        this.connectionMetrics = { active, available, created, destroyed };
    }

    /**
     * Generates comprehensive database performance report
     */
    getMetrics() {
        const metrics = {
            totalQueries: this.queryCount,
            slowQueries: this.slowQueries.length,
            connectionPool: this.connectionMetrics,
            queryStats: {},
            recentSlowQueries: this.slowQueries.slice(-10)
        };
        
        for (const [queryName, stats] of this.queryTimes) {
            metrics.queryStats[queryName] = {
                count: stats.count,
                avgDuration: Math.round(stats.total / stats.count * 100) / 100,
                minDuration: stats.min,
                maxDuration: stats.max,
                p95Duration: stats.p95,
                failureRate: Math.round(stats.failures / stats.count * 10000) / 100, // Percentage with 2 decimals
                queriesPerSecond: this.calculateQPS(stats.count)
            };
        }
        
        return metrics;
    }

    calculateQPS(queryCount) {
        // Calculate queries per second over last hour (simplified)
        const hoursRunning = Math.max(process.uptime() / 3600, 1);
        return Math.round(queryCount / hoursRunning * 100) / 100;
    }
}

/**
 * HTTP Request Performance Metrics Collector
 * 
 * Tracks API endpoint performance, response times, and throughput metrics.
 * Enables identification of performance bottlenecks and capacity planning.
 */
class RequestMetrics { // tracks HTTP endpoint stats
    constructor() { // set up request counters
        this.endpoints = new Map();
        this.totalRequests = 0;
        this.startTime = Date.now();
    }

    /**
     * Records HTTP request performance metrics
     */
    recordRequest(method, path, statusCode, duration, userAgent = null) {
        this.totalRequests++;
        const endpoint = `${method} ${path}`;
        
        if (!this.endpoints.has(endpoint)) {
            this.endpoints.set(endpoint, {
                requests: 0,
                totalDuration: 0,
                minDuration: Infinity,
                maxDuration: 0,
                statusCodes: new Map(),
                recentTimes: [],
                p95: 0
            });
        }
        
        const stats = this.endpoints.get(endpoint);
        stats.requests++;
        stats.totalDuration += duration;
        stats.minDuration = Math.min(stats.minDuration, duration);
        stats.maxDuration = Math.max(stats.maxDuration, duration);
        stats.recentTimes.push(duration);
        
        // Track status code distribution
        stats.statusCodes.set(statusCode, (stats.statusCodes.get(statusCode) || 0) + 1);
        
        // Keep rolling window for percentile calculation
        if (stats.recentTimes.length > 100) {
            stats.recentTimes.shift();
        }
        
        // Calculate p95
        if (stats.recentTimes.length >= 20) {
            const sorted = [...stats.recentTimes].sort((a, b) => a - b);
            stats.p95 = sorted[Math.floor(sorted.length * 0.95)];
        }
    }

    /**
     * Generates HTTP performance metrics report
     */
    getMetrics() {
        const uptime = Date.now() - this.startTime;
        const rps = this.totalRequests / (uptime / 1000);
        
        const metrics = {
            totalRequests: this.totalRequests,
            requestsPerSecond: Math.round(rps * 100) / 100,
            uptime: Math.round(uptime / 1000),
            endpoints: {}
        };
        
        for (const [endpoint, stats] of this.endpoints) {
            const errorCount = Array.from(stats.statusCodes.entries())
                .filter(([code]) => code >= 400)
                .reduce((sum, [, count]) => sum + count, 0);
            
            metrics.endpoints[endpoint] = {
                requests: stats.requests,
                avgDuration: Math.round(stats.totalDuration / stats.requests * 100) / 100,
                minDuration: stats.minDuration,
                maxDuration: stats.maxDuration,
                p95Duration: stats.p95,
                errorRate: Math.round(errorCount / stats.requests * 10000) / 100,
                statusCodes: Object.fromEntries(stats.statusCodes)
            };
        }
        
        return metrics;
    }
}

/**
 * System Resource Monitoring
 * 
 * Tracks memory usage, CPU utilization, and system health metrics.
 * Provides early warning for resource exhaustion scenarios.
 */
class SystemMetrics { // monitors OS resource usage
    constructor() { // initialize history arrays
        this.memoryHistory = [];
        this.cpuHistory = [];
        this.lastCpuUsage = process.cpuUsage();
        this.startTime = process.hrtime();
        
        // Collect metrics every 30 seconds
        setInterval(() => this.collectMetrics(), 30000);
    }

    collectMetrics() {
        const memory = process.memoryUsage();
        const cpuUsage = process.cpuUsage(this.lastCpuUsage);
        const elapsed = process.hrtime(this.startTime);
        const elapsedMS = elapsed[0] * 1000 + elapsed[1] / 1000000;
        
        // Calculate CPU percentage
        const cpuPercent = (cpuUsage.user + cpuUsage.system) / (elapsedMS * 1000) * 100;
        
        this.memoryHistory.push({
            timestamp: Date.now(),
            rss: memory.rss,
            heapUsed: memory.heapUsed,
            heapTotal: memory.heapTotal,
            external: memory.external
        });
        
        this.cpuHistory.push({
            timestamp: Date.now(),
            percent: cpuPercent
        });
        
        // Keep only last 24 hours of data (2880 points at 30s intervals)
        if (this.memoryHistory.length > 2880) {
            this.memoryHistory.shift();
        }
        if (this.cpuHistory.length > 2880) {
            this.cpuHistory.shift();
        }
        
        this.lastCpuUsage = process.cpuUsage();
        this.startTime = process.hrtime();
    }

    getMetrics() {
        const currentMemory = process.memoryUsage();
        const recentCpu = this.cpuHistory.slice(-10);
        const avgCpu = recentCpu.length > 0 
            ? recentCpu.reduce((sum, point) => sum + point.percent, 0) / recentCpu.length 
            : 0;
        
        return {
            memory: {
                current: {
                    rss: Math.round(currentMemory.rss / 1024 / 1024 * 100) / 100,
                    heapUsed: Math.round(currentMemory.heapUsed / 1024 / 1024 * 100) / 100,
                    heapTotal: Math.round(currentMemory.heapTotal / 1024 / 1024 * 100) / 100,
                    external: Math.round(currentMemory.external / 1024 / 1024 * 100) / 100
                },
                history: this.memoryHistory.slice(-100) // Last 100 points
            },
            cpu: {
                current: Math.round(avgCpu * 100) / 100,
                history: this.cpuHistory.slice(-100)
            },
            uptime: process.uptime(),
            nodeVersion: process.version
        };
    }
}

/**
 * Centralized Performance Monitor
 * 
 * Aggregates all performance metrics and provides unified reporting interface.
 */
class PerformanceMonitor { // orchestrates metric collectors
    constructor() { // instantiate all metric modules
        this.database = new DatabaseMetrics();
        this.requests = new RequestMetrics();
        this.system = new SystemMetrics();
        
        // Set up alerting for critical performance issues
        this.database.on('slowQuery', (query) => {
            console.warn(`PERFORMANCE_ALERT: Slow query detected - ${query.queryName} took ${query.duration}ms`);
        });
    }

    /**
     * Creates Express middleware for automatic request tracking
     */
    createRequestMiddleware() { // middleware to log request timings
        return (req, res, next) => {
            const startTime = process.hrtime.bigint();
            
            res.on('finish', () => {
                const endTime = process.hrtime.bigint();
                const duration = Number(endTime - startTime) / 1000000; // Convert to ms
                
                this.requests.recordRequest(
                    req.method,
                    req.route?.path || req.path,
                    res.statusCode,
                    duration,
                    req.get('User-Agent')
                );
            });
            
            next();
        };
    }

    /**
     * Wraps database operations for automatic performance tracking
     */
    wrapDatabaseOperation(operation, operationName) { // wrap DB functions for metrics
        return async (...args) => {
            const startTime = process.hrtime.bigint();
            let success = true;
            
            try {
                const result = await operation(...args);
                return result;
            } catch (error) {
                success = false;
                throw error;
            } finally {
                const endTime = process.hrtime.bigint();
                const duration = Number(endTime - startTime) / 1000000;
                
                this.database.recordQuery(operationName, duration, success);
            }
        };
    }

    /**
     * Generates comprehensive performance report
     */
    getComprehensiveMetrics() { // produce full metrics snapshot
        return {
            timestamp: new Date().toISOString(),
            database: this.database.getMetrics(),
            requests: this.requests.getMetrics(),
            system: this.system.getMetrics()
        };
    }

    /**
     * Generates performance health check summary
     */
    getHealthCheck() { // quick health summary
        const dbMetrics = this.database.getMetrics();
        const reqMetrics = this.requests.getMetrics();
        const sysMetrics = this.system.getMetrics();
        
        const health = {
            status: 'healthy',
            checks: {
                database: {
                    status: dbMetrics.slowQueries < 10 ? 'healthy' : 'degraded',
                    slowQueries: dbMetrics.slowQueries
                },
                requests: {
                    status: reqMetrics.requestsPerSecond < 1000 ? 'healthy' : 'high_load',
                    rps: reqMetrics.requestsPerSecond
                },
                memory: {
                    status: sysMetrics.memory.current.heapUsed < 512 ? 'healthy' : 'high_usage',
                    heapUsedMB: sysMetrics.memory.current.heapUsed
                }
            }
        };
        
        // Overall status is worst of individual checks
        const statuses = Object.values(health.checks).map(check => check.status);
        if (statuses.includes('degraded')) {
            health.status = 'degraded';
        } else if (statuses.includes('high_load') || statuses.includes('high_usage')) {
            health.status = 'warning';
        }
        
        return health;
    }
}

// Export singleton instance
const performanceMonitor = new PerformanceMonitor();

module.exports = {
    performanceMonitor,
    DatabaseMetrics,
    RequestMetrics,
    SystemMetrics,
    PerformanceMonitor