/**
 * Idempotency Helper for Database Operations
 * 
 * Purpose: Implements idempotency checks for critical operations
 * Consolidates idempotency patterns from webhook and payment processing.
 * 
 * Idempotency rationale:
 * - Payment operations must not be duplicated (financial impact)
 * - Webhook events may be delivered multiple times
 * - Race conditions can cause duplicate processing
 * - Idempotency keys prevent accidental duplicate operations
 */
async function ensureIdempotency(model, idempotencyKey, operation, operationName) {
    const context = { idempotencyKey, model: model.modelName };
    
    // Check if operation already exists
    const existingRecord = await safeDbOperation(
        () => model.findOne({ [idempotencyKey.field]: idempotencyKey.value }),
        `${operationName}_idempotency_check`,
        context
    );
    
    if (!existingRecord.success) {
        return existingRecord;
    }
    
    if (existingRecord.data) {
        logger.info('Idempotent operation detected', {
            operation: operationName,
            existingId: existingRecord.data._id,
            context
        });
        
        return {
            success: true,
            data: existingRecord.data,
            idempotent: true
        };
    }
    
    // Perform operation with duplicate key handling
    const result = await safeDbOperation(operation, operationName, context);
    
    // Handle race condition where another process created the record
    if (!result.success && result.error.type === 'DUPLICATE_KEY_ERROR') {
        logger.info('Race condition detected, fetching existing record', {
            operation: operationName,
            context
        });
        
        const raceResult = await safeDbOperation(
            () => model.findOne({ [idempotencyKey.field]: idempotencyKey.value }),
            `${operationName}_race_recovery`,
            context
        );
        
        if (raceResult.success && raceResult.data) {
            return {
                success: true,
                data: raceResult.data,
                idempotent: true,
                raceCondition: true
            };
        }
    }
    
    return result;
}