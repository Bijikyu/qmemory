const { logger } = require('./logger');
const { qerrors } = require('./offlineMode');

/**
 * MongoDB Error Handler
 * 
 * Purpose: Centralizes MongoDB error handling logic duplicated across services
 * Consolidates error handling patterns from paymentService.js and other data services.
 * 
 * Error handling rationale:
 * - Duplicate key errors (11000) often indicate race conditions or retry scenarios
 * - Connection errors require different handling than validation errors
 * - Consistent error classification enables appropriate client responses
 * - Structured error logging supports debugging and monitoring
 */
function handleMongoError(error, operation, context = {}) {
    const errorInfo = {
        operation,
        context,
        timestamp: new Date().toISOString(),
        errorCode: error.code,
        errorMessage: error.message
    };

    // Handle duplicate key errors (common in payment processing)
    if (error.code === 11000) {
        const duplicateKeyInfo = {
            ...errorInfo,
            type: 'DUPLICATE_KEY_ERROR',
            severity: 'medium',
            recoverable: true,
            keyValue: error.keyValue || 'unknown'
        };
        
        logger.warn('Duplicate key error in database operation', duplicateKeyInfo);
        qerrors(error, `Duplicate key error in ${operation}`, context);
        
        return {
            type: 'DUPLICATE_KEY_ERROR',
            message: 'Resource already exists',
            recoverable: true,
            statusCode: 409
        };
    }

    // Handle validation errors
    if (error.name === 'ValidationError') {
        const validationInfo = {
            ...errorInfo,
            type: 'VALIDATION_ERROR',
            severity: 'low',
            recoverable: true,
            validationErrors: Object.keys(error.errors || {})
        };
        
        logger.warn('Database validation error', validationInfo);
        qerrors(error, `Validation error in ${operation}`, context);
        
        return {
            type: 'VALIDATION_ERROR',
            message: 'Data validation failed',
            details: error.errors,
            recoverable: true,
            statusCode: 400
        };
    }

    // Handle connection errors
    if (error.name === 'MongoNetworkError' || error.name === 'MongoServerError') {
        const connectionInfo = {
            ...errorInfo,
            type: 'CONNECTION_ERROR',
            severity: 'high',
            recoverable: false
        };
        
        logger.error('Database connection error', connectionInfo);
        qerrors(error, `Connection error in ${operation}`, context);
        
        return {
            type: 'CONNECTION_ERROR',
            message: 'Database connection failed',
            recoverable: false,
            statusCode: 503
        };
    }

    // Handle timeout errors
    if (error.name === 'MongoServerSelectionError' || error.message.includes('timeout')) {
        const timeoutInfo = {
            ...errorInfo,
            type: 'TIMEOUT_ERROR',
            severity: 'high',
            recoverable: true
        };
        
        logger.error('Database timeout error', timeoutInfo);
        qerrors(error, `Timeout error in ${operation}`, context);
        
        return {
            type: 'TIMEOUT_ERROR',
            message: 'Database operation timed out',
            recoverable: true,
            statusCode: 504
        };
    }

    // Handle unknown errors
    const unknownInfo = {
        ...errorInfo,
        type: 'UNKNOWN_ERROR',
        severity: 'high',
        recoverable: false
    };
    
    logger.error('Unknown database error', unknownInfo);
    qerrors(error, `Unknown error in ${operation}`, context);
    
    return {
        type: 'UNKNOWN_ERROR',
        message: 'Database operation failed',
        recoverable: false,
        statusCode: 500
    };